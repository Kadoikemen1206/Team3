//=============================================================================
//
// 障害物処理 [obstacle.cpp]
// Author : saito shian
//
//=============================================================================

//=============================================================================
// インクルードファイル
//=============================================================================
#include "obstacle.h"
#include "player.h"

//=============================================================================
// コンストラクタ
//=============================================================================
CObstacle::CObstacle(int nPriority)
{
}

//=============================================================================
// デストラクタ
//=============================================================================
CObstacle::~CObstacle()
{
}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CObstacle::Init()
{
	CGimmick::Init();

	//モデルのロード
	LoadModel("GIMMICWALL");

	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CObstacle::Uninit()
{
	CGimmick::Uninit();
}

//=============================================================================
// 更新処理
//=============================================================================
void CObstacle::Update()
{
	//ギミックの更新
	CGimmick::Update();
	D3DXVECTOR3 ObstacleMove = GetMove();
	D3DXVECTOR3 ObstaclePos = GetPos();
	D3DXVECTOR3 PlayerPos = CPlayer::GetPlayerPos();		//プレイヤーPOS情報の取得

	//if(PlayerPos >= )
	ObstacleMove = D3DXVECTOR3(0.0f, 5.0f, 0.0f);

	//位置更新
	ObstaclePos.x += ObstacleMove.x;
	ObstaclePos.y += ObstacleMove.y;
	ObstaclePos.z += ObstacleMove.z;

	//移動量減衰
	ObstaclePos.x += (0.0f - ObstacleMove.x) * 0.1f;
	ObstaclePos.y += (0.0f - ObstacleMove.y) * 0.1f;
	ObstaclePos.z += (0.0f - ObstacleMove.z) * 0.1f;

	SetMove(ObstacleMove);
	SetPos(ObstaclePos);
}

//=============================================================================
// 描画処理
//=============================================================================
void CObstacle::Draw()
{
	CGimmick::Draw();
}

//=============================================================================
// 生成処理
//=============================================================================
void CObstacle::ConstOperate(int barrage, int rotate)
{
}

//=============================================================================
// 操作処理
//=============================================================================
CObstacle * CObstacle::Create(const D3DXVECTOR3 pos, int nPriority)
{
	CObstacle *pObstacle = new CObstacle(nPriority);

	if (pObstacle != nullptr)
	{
		pObstacle->Init();
		pObstacle->SetPos(pos);
	}
	else
	{
		assert(false);
	}

	return pObstacle;
}
